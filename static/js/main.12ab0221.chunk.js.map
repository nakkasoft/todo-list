{"version":3,"sources":["ListComponent.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["ListComponent","_ref","form","palette","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","color","style","onClick","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","onToggle","onRemove","e","stopPropagation","concat","Component","TodoItemList","todos","todoList","map","src_components_TodoItem","key","Color","active","background","Palette","_ref2","colors","selected","onSelect","colorlist","Palette_Color","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","lastId","state","input","handleChange","_this","setState","target","handleCreate","_this$state","_tmptodo","tmptodo","apply","Object","toConsumableArray","saveTodosToLocalstorage","handleKeyPress","handleToggle","index","findIndex","todo","tmptodo2","filter","handleRemove","handleSelectColor","todolist","firebase","database","ref","update","setTodosState","loadTodosFromLocalstorage","once","then","snapshot","val","initializeApp","_this$state2","src_ListComponent_0","src_components_Form","src_components_Palette","src_components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12ab0221.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListComponent.css';\r\n\r\nconst ListComponent = ({form, palette, children}) => {\r\n    return(\r\n        <main className=\"list-component\">\r\n            <div className=\"title\">\r\n                To Do List\r\n            </div>\r\n            <section className=\"palette-wrapper\">\r\n                {palette}\r\n            </section>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default ListComponent;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress, color}) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color}}/>\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const {text, checked, id, color, onToggle, onRemove} = this.props;\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onRemove(id)}\r\n                }>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`} style={{color}}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">&#x2713;</div>)\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport './TodoItemList.css'\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render() {\r\n        const {todos, onToggle, onRemove} = this.props;\r\n        const todoList = todos.map(\r\n            ({id, text, checked, color}) => (\r\n                <TodoItem \r\n                    id={id}\r\n                    text={text}\r\n                    checked={checked}\r\n                    color={color}\r\n                    onToggle={onToggle}\r\n                    onRemove={onRemove}\r\n                    key={id}\r\n                />\r\n            )\r\n        );\r\n        return(\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React from 'react';\r\nimport './Palette.css';\r\n\r\nconst Color = ({color, active, onClick}) => {\r\n    return(\r\n        <div className={`color ${active && 'active'}`} style={{background: color}} onClick={onClick}>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Palette = ({colors, selected, onSelect}) => {\r\n    const colorlist = colors.map(\r\n        (color) => (<Color color={color} active={selected===color} onClick={() => onSelect(color)} key={color}/>)\r\n    );\r\n    return(\r\n        <div className=\"palette\">\r\n            {colorlist}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Palette;","import React, { Component } from 'react';\nimport ListComponent from './ListComponent';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport Palette from './components/Palette';\nimport firebase from 'firebase';\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\n\nconst config = {\n  apiKey: \"AIzaSyDHO5e_paBM4vUHzvpm402nmZioUZ49cfA\",\n  authDomain: \"todo-list-e3734.firebaseapp.com\",\n  databaseURL: \"https://todo-list-e3734.firebaseio.com\",\n  projectId: \"todo-list-e3734\",\n  storageBucket: \"todo-list-e3734.appspot.com\",\n  messagingSenderId: \"120737067435\"\n};\n\nclass App extends Component {\n\n  lastId = 0;\n  id = 0;\n\n  state = {\n    input: '',\n    color: '#343a40',\n    todos: [\n    ]\n  }\n\n  componentDidMount(){\n    firebase.initializeApp(config);\n    this.loadTodosFromLocalstorage();\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    const {input, todos, color} = this.state;\n    if(input !== \"\"){\n      var tmptodo = [];\n      tmptodo = tmptodo.concat({\n        id: this.lastId++,\n        text: input,\n        color: color,\n        checked: false\n      },...todos)\n\n      this.setState({\n        input: '', // 인풋 비우고\n        // concat 을 사용하여 배열에 추가\n        todos: tmptodo\n      });\n\n      this.saveTodosToLocalstorage(tmptodo);      \n      //this.loadTodosFromLocalstorage();\n    }\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const {todos} = this.state;\n\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    if(selected.checked == true) return; // Checked 상태면 아무동작 안함. Spec.\n\n    const tmptodo = todos.filter(todo => todo.id !== id);\n\n    //const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n/*\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n*/\n    const tmptodo2 = tmptodo.concat({\n      id: selected.id,\n      text: selected.text,\n      color: selected.color,\n      checked: true\n    })\n\n    this.setState({\n      todos: tmptodo2\n    });\n\n    this.saveTodosToLocalstorage(tmptodo2);\n  }\n\n  handleRemove = (id) => {\n    const {todos} = this.state;\n    const tmptodo = todos.filter(todo => todo.id !== id);\n    this.setState({\n      todos: tmptodo\n    });\n  \n    this.saveTodosToLocalstorage(tmptodo);\n  }\n\n  handleSelectColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n\n  saveTodosToLocalstorage = (todolist) => {\n    //localStorage.setItem('todolist', JSON.stringify(todolist));\n    firebase.database().ref().update({\n      todos: todolist\n    });\n    firebase.database().ref().update({\n      lastId: this.lastId\n    });\n  }\n\n  setTodosState = (todolist) => {\n    if(todolist !== null){\n      this.setState({\n        todos: todolist\n      });\n    }\n  }\n\n  loadTodosFromLocalstorage = () => {\n    firebase.database().ref('/todos').once('value').then((snapshot) => {\n      var todolist = snapshot.val();\n      //console.log(todolist);\n      this.setTodosState(todolist);\n    });\n\n    firebase.database().ref('/lastId').once('value').then((snapshot) => {\n      this.lastId = snapshot.val();\n    });\n\n    //const todolist = JSON.parse(localStorage.getItem('todolist'));\n  }\n\n  render() {\n    const {input, todos, color} = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor\n    } = this;\n\n    return (\n\n      <ListComponent form={(\n        <Form\n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n          color={color}\n        />\n      )}\n        palette={(\n          <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\n      )}>\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </ListComponent>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}